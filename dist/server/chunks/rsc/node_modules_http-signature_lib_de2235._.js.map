{
  "version": 3,
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/http-signature/lib/utils.js"],"sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar sshpk = require('sshpk');\nvar util = require('util');\n\nvar HASH_ALGOS = {\n  'sha1': true,\n  'sha256': true,\n  'sha512': true\n};\n\nvar PK_ALGOS = {\n  'rsa': true,\n  'dsa': true,\n  'ecdsa': true\n};\n\nvar HEADER = {\n  AUTH: 'authorization',\n  SIG: 'signature'\n};\n\nfunction HttpSignatureError(message, caller) {\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, caller || HttpSignatureError);\n\n  this.message = message;\n  this.name = caller.name;\n}\nutil.inherits(HttpSignatureError, Error);\n\nfunction InvalidAlgorithmError(message) {\n  HttpSignatureError.call(this, message, InvalidAlgorithmError);\n}\nutil.inherits(InvalidAlgorithmError, HttpSignatureError);\n\nfunction validateAlgorithm(algorithm) {\n  var alg = algorithm.toLowerCase().split('-');\n\n  if (alg.length !== 2) {\n    throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' is not a ' +\n      'valid algorithm'));\n  }\n\n  if (alg[0] !== 'hmac' && !PK_ALGOS[alg[0]]) {\n    throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' type keys ' +\n      'are not supported'));\n  }\n\n  if (!HASH_ALGOS[alg[1]]) {\n    throw (new InvalidAlgorithmError(alg[1].toUpperCase() + ' is not a ' +\n      'supported hash algorithm'));\n  }\n\n  return (alg);\n}\n\n///--- API\n\nmodule.exports = {\n  HEADER: HEADER,\n\n  HASH_ALGOS: HASH_ALGOS,\n  PK_ALGOS: PK_ALGOS,\n\n  HttpSignatureError: HttpSignatureError,\n  InvalidAlgorithmError: InvalidAlgorithmError,\n\n  validateAlgorithm: validateAlgorithm,\n\n  /**\n   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\n   *\n   * The intent of this module is to interoperate with OpenSSL only,\n   * specifically the node crypto module's `verify` method.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} PEM encoded form of the RSA public key.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} on invalid ssh key formatted data.\n   */\n  sshKeyToPEM: function sshKeyToPEM(key) {\n    assert.string(key, 'ssh_key');\n\n    var k = sshpk.parseKey(key, 'ssh');\n    return (k.toString('pem'));\n  },\n\n\n  /**\n   * Generates an OpenSSH fingerprint from an ssh public key.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} key fingerprint.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} if what you passed doesn't look like an ssh public key.\n   */\n  fingerprint: function fingerprint(key) {\n    assert.string(key, 'ssh_key');\n\n    var k = sshpk.parseKey(key, 'ssh');\n    return (k.fingerprint('md5').toString('hex'));\n  },\n\n  /**\n   * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)\n   *\n   * The reverse of the above function.\n   */\n  pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {\n    assert.equal('string', typeof (pem), 'typeof pem');\n\n    var k = sshpk.parseKey(pem, 'pem');\n    k.comment = comment;\n    return (k.toString('ssh'));\n  }\n};\n"],"names":[],"mappings":"AAAA,oDAAoD;AAEpD,IAAI,SAAS;AACb,IAAI,QAAQ;AACZ,IAAI,OAAO,+BAAQ;AAEnB,IAAI,aAAa;IACf,QAAQ;IACR,UAAU;IACV,UAAU;AACZ;AAEA,IAAI,WAAW;IACb,OAAO;IACP,OAAO;IACP,SAAS;AACX;AAEA,IAAI,SAAS;IACX,MAAM;IACN,KAAK;AACP;AAEA,SAAS,mBAAmB,OAAO,EAAE,MAAM;IACzC,IAAI,MAAM,iBAAiB,EACzB,MAAM,iBAAiB,CAAC,IAAI,EAAE,UAAU;IAE1C,IAAI,CAAC,OAAO,GAAG;IACf,IAAI,CAAC,IAAI,GAAG,OAAO,IAAI;AACzB;AACA,KAAK,QAAQ,CAAC,oBAAoB;AAElC,SAAS,sBAAsB,OAAO;IACpC,mBAAmB,IAAI,CAAC,IAAI,EAAE,SAAS;AACzC;AACA,KAAK,QAAQ,CAAC,uBAAuB;AAErC,SAAS,kBAAkB,SAAS;IAClC,IAAI,MAAM,UAAU,WAAW,GAAG,KAAK,CAAC;IAExC,IAAI,IAAI,MAAM,KAAK,GAAG;QACpB,MAAO,IAAI,sBAAsB,GAAG,CAAC,EAAE,CAAC,WAAW,KAAK,eACtD;IACJ;IAEA,IAAI,GAAG,CAAC,EAAE,KAAK,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;QAC1C,MAAO,IAAI,sBAAsB,GAAG,CAAC,EAAE,CAAC,WAAW,KAAK,gBACtD;IACJ;IAEA,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;QACvB,MAAO,IAAI,sBAAsB,GAAG,CAAC,EAAE,CAAC,WAAW,KAAK,eACtD;IACJ;IAEA,OAAQ;AACV;AAEA,UAAU;AAEV,OAAO,OAAO,GAAG;IACf,QAAQ;IAER,YAAY;IACZ,UAAU;IAEV,oBAAoB;IACpB,uBAAuB;IAEvB,mBAAmB;IAEnB;;;;;;;;;;GAUC,GACD,aAAa,SAAS,YAAY,GAAG;QACnC,OAAO,MAAM,CAAC,KAAK;QAEnB,IAAI,IAAI,MAAM,QAAQ,CAAC,KAAK;QAC5B,OAAQ,EAAE,QAAQ,CAAC;IACrB;IAGA;;;;;;;GAOC,GACD,aAAa,SAAS,YAAY,GAAG;QACnC,OAAO,MAAM,CAAC,KAAK;QAEnB,IAAI,IAAI,MAAM,QAAQ,CAAC,KAAK;QAC5B,OAAQ,EAAE,WAAW,CAAC,OAAO,QAAQ,CAAC;IACxC;IAEA;;;;GAIC,GACD,gBAAgB,SAAS,eAAe,GAAG,EAAE,OAAO;QAClD,OAAO,KAAK,CAAC,UAAU,OAAQ,KAAM;QAErC,IAAI,IAAI,MAAM,QAAQ,CAAC,KAAK;QAC5B,EAAE,OAAO,GAAG;QACZ,OAAQ,EAAE,QAAQ,CAAC;IACrB;AACF"}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/http-signature/lib/verify.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar sshpk = require('sshpk');\nvar utils = require('./utils');\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Verify RSA/DSA signature against public key.  You are expected to pass in\n   * an object that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} pubkey RSA/DSA private key PEM.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifySignature: function verifySignature(parsedSignature, pubkey) {\n    assert.object(parsedSignature, 'parsedSignature');\n    if (typeof (pubkey) === 'string' || Buffer.isBuffer(pubkey))\n      pubkey = sshpk.parseKey(pubkey);\n    assert.ok(sshpk.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');\n\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] === 'hmac' || alg[0] !== pubkey.type)\n      return (false);\n\n    var v = pubkey.createVerify(alg[1]);\n    v.update(parsedSignature.signingString);\n    return (v.verify(parsedSignature.params.signature, 'base64'));\n  },\n\n  /**\n   * Verify HMAC against shared secret.  You are expected to pass in an object\n   * that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} or {Buffer} secret HMAC shared secret.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifyHMAC: function verifyHMAC(parsedSignature, secret) {\n    assert.object(parsedSignature, 'parsedHMAC');\n    assert(typeof (secret) === 'string' || Buffer.isBuffer(secret));\n\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] !== 'hmac')\n      return (false);\n\n    var hashAlg = alg[1].toUpperCase();\n\n    var hmac = crypto.createHmac(hashAlg, secret);\n    hmac.update(parsedSignature.signingString);\n\n    /*\n     * Now double-hash to avoid leaking timing information - there's\n     * no easy constant-time compare in JS, so we use this approach\n     * instead. See for more info:\n     * https://www.isecpartners.com/blog/2011/february/double-hmac-\n     * verification.aspx\n     */\n    var h1 = crypto.createHmac(hashAlg, secret);\n    h1.update(hmac.digest());\n    h1 = h1.digest();\n    var h2 = crypto.createHmac(hashAlg, secret);\n    h2.update(new Buffer(parsedSignature.params.signature, 'base64'));\n    h2 = h2.digest();\n\n    /* Node 0.8 returns strings from .digest(). */\n    if (typeof (h1) === 'string')\n      return (h1 === h2);\n    /* And node 0.10 lacks the .equals() method on Buffers. */\n    if (Buffer.isBuffer(h1) && !h1.equals)\n      return (h1.toString('binary') === h2.toString('binary'));\n\n    return (h1.equals(h2));\n  }\n};\n"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,IAAI,SAAS;AACb,IAAI,SAAS,+BAAQ;AACrB,IAAI,QAAQ;AACZ,IAAI,QAAQ;AAEZ,IAAI,aAAa,MAAM,UAAU;AACjC,IAAI,WAAW,MAAM,QAAQ;AAC7B,IAAI,wBAAwB,MAAM,qBAAqB;AACvD,IAAI,qBAAqB,MAAM,kBAAkB;AACjD,IAAI,oBAAoB,MAAM,iBAAiB;AAE/C,mBAAmB;AAEnB,OAAO,OAAO,GAAG;IACf;;;;;;;;;GASC,GACD,iBAAiB,SAAS,gBAAgB,eAAe,EAAE,MAAM;QAC/D,OAAO,MAAM,CAAC,iBAAiB;QAC/B,IAAI,OAAQ,WAAY,YAAY,OAAO,QAAQ,CAAC,SAClD,SAAS,MAAM,QAAQ,CAAC;QAC1B,OAAO,EAAE,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,QAAQ;YAAC;YAAG;SAAE,GAAG;QAE3C,IAAI,MAAM,kBAAkB,gBAAgB,SAAS;QACrD,IAAI,GAAG,CAAC,EAAE,KAAK,UAAU,GAAG,CAAC,EAAE,KAAK,OAAO,IAAI,EAC7C,OAAQ;QAEV,IAAI,IAAI,OAAO,YAAY,CAAC,GAAG,CAAC,EAAE;QAClC,EAAE,MAAM,CAAC,gBAAgB,aAAa;QACtC,OAAQ,EAAE,MAAM,CAAC,gBAAgB,MAAM,CAAC,SAAS,EAAE;IACrD;IAEA;;;;;;;;;GASC,GACD,YAAY,SAAS,WAAW,eAAe,EAAE,MAAM;QACrD,OAAO,MAAM,CAAC,iBAAiB;QAC/B,OAAO,OAAQ,WAAY,YAAY,OAAO,QAAQ,CAAC;QAEvD,IAAI,MAAM,kBAAkB,gBAAgB,SAAS;QACrD,IAAI,GAAG,CAAC,EAAE,KAAK,QACb,OAAQ;QAEV,IAAI,UAAU,GAAG,CAAC,EAAE,CAAC,WAAW;QAEhC,IAAI,OAAO,OAAO,UAAU,CAAC,SAAS;QACtC,KAAK,MAAM,CAAC,gBAAgB,aAAa;QAEzC;;;;;;KAMC,GACD,IAAI,KAAK,OAAO,UAAU,CAAC,SAAS;QACpC,GAAG,MAAM,CAAC,KAAK,MAAM;QACrB,KAAK,GAAG,MAAM;QACd,IAAI,KAAK,OAAO,UAAU,CAAC,SAAS;QACpC,GAAG,MAAM,CAAC,IAAI,OAAO,gBAAgB,MAAM,CAAC,SAAS,EAAE;QACvD,KAAK,GAAG,MAAM;QAEd,4CAA4C,GAC5C,IAAI,OAAQ,OAAQ,UAClB,OAAQ,OAAO;QACjB,wDAAwD,GACxD,IAAI,OAAO,QAAQ,CAAC,OAAO,CAAC,GAAG,MAAM,EACnC,OAAQ,GAAG,QAAQ,CAAC,cAAc,GAAG,QAAQ,CAAC;QAEhD,OAAQ,GAAG,MAAM,CAAC;IACpB;AACF"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/http-signature/lib/signer.js"],"sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar util = require('util');\nvar sshpk = require('sshpk');\nvar jsprim = require('jsprim');\nvar utils = require('./utils');\n\nvar sprintf = require('util').format;\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Globals\n\nvar AUTHZ_PARAMS = [ 'keyId', 'algorithm', 'created', 'expires', 'opaque',\n  'headers', 'signature' ];\n\n///--- Specific Errors\n\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\n\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n\nfunction FormatAuthz(prefix, params) {\n  assert.string(prefix, 'prefix');\n  assert.object(params, 'params');\n\n  var authz = '';\n  for (var i = 0; i < AUTHZ_PARAMS.length; i++) {\n    var param = AUTHZ_PARAMS[i];\n    var value = params[param];\n    if (value === undefined)\n      continue;\n    if (typeof (value) === 'number') {\n      authz += prefix + sprintf('%s=%d', param, value);\n    } else {\n      assert.string(value, 'params.' + param);\n\n      authz += prefix + sprintf('%s=\"%s\"', param, value);\n    }\n    prefix = ',';\n  }\n\n  return (authz);\n}\n\n/* See createSigner() */\nfunction RequestSigner(options) {\n  assert.object(options, 'options');\n\n  var alg = [];\n  if (options.algorithm !== undefined) {\n    assert.string(options.algorithm, 'options.algorithm');\n    alg = validateAlgorithm(options.algorithm);\n  }\n  this.rs_alg = alg;\n\n  /*\n   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n   * with an rs_signer.\n   *\n   * rs_signFunc-based RequestSigners have to build up their entire signing\n   * string within the rs_lines array and give it to rs_signFunc as a single\n   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n   * their signing state by using rs_signer.update(), thus only needing to\n   * buffer the hash function state and one line at a time.\n   */\n  if (options.sign !== undefined) {\n    assert.func(options.sign, 'options.sign');\n    this.rs_signFunc = options.sign;\n\n  } else if (alg[0] === 'hmac' && options.key !== undefined) {\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n      throw (new TypeError('options.key for HMAC must be a string or Buffer'));\n\n    /*\n     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n     * data in chunks rather than requiring it all to be given in one go\n     * at the end, so they are more similar to signers than signFuncs.\n     */\n    this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n    this.rs_signer.sign = function () {\n      var digest = this.digest('base64');\n      return ({\n        hashAlgorithm: alg[1],\n        toString: function () { return (digest); }\n      });\n    };\n\n  } else if (options.key !== undefined) {\n    var key = options.key;\n    if (typeof (key) === 'string' || Buffer.isBuffer(key))\n      assert.optionalString(options.keyPassphrase, 'options.keyPassphrase');\n      key = sshpk.parsePrivateKey(key, 'auto', {\n        passphrase: options.keyPassphrase\n      });\n\n    assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n      'options.key must be a sshpk.PrivateKey');\n    this.rs_key = key;\n\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (!PK_ALGOS[key.type]) {\n      throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n        'keys are not supported'));\n    }\n\n    if (alg[0] !== undefined && key.type !== alg[0]) {\n      throw (new InvalidAlgorithmError('options.key must be a ' +\n        alg[0].toUpperCase() + ' key, was given a ' +\n        key.type.toUpperCase() + ' key instead'));\n    }\n\n    this.rs_signer = key.createSign(alg[1]);\n\n  } else {\n    throw (new TypeError('options.sign (func) or options.key is required'));\n  }\n\n  this.rs_headers = [];\n  this.rs_lines = [];\n}\n\n/**\n * Adds a header to be signed, with its value, into this signer.\n *\n * @param {String} header\n * @param {String} value\n * @return {String} value written\n */\nRequestSigner.prototype.writeHeader = function (header, value) {\n  assert.string(header, 'header');\n  header = header.toLowerCase();\n  assert.string(value, 'value');\n\n  this.rs_headers.push(header);\n\n  if (this.rs_signFunc) {\n    this.rs_lines.push(header + ': ' + value);\n\n  } else {\n    var line = header + ': ' + value;\n    if (this.rs_headers.length > 0)\n      line = '\\n' + line;\n    this.rs_signer.update(line);\n  }\n\n  return (value);\n};\n\n/**\n * Adds a default Date header, returning its value.\n *\n * @return {String}\n */\nRequestSigner.prototype.writeDateHeader = function () {\n  return (this.writeHeader('date', jsprim.rfc1123(new Date())));\n};\n\n/**\n * Adds the request target line to be signed.\n *\n * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n * @param {String} path\n */\nRequestSigner.prototype.writeTarget = function (method, path) {\n  assert.string(method, 'method');\n  assert.string(path, 'path');\n  method = method.toLowerCase();\n  this.writeHeader('(request-target)', method + ' ' + path);\n};\n\n/**\n * Calculate the value for the Authorization header on this request\n * asynchronously.\n *\n * @param {Func} callback (err, authz)\n */\nRequestSigner.prototype.sign = function (cb) {\n  assert.func(cb, 'callback');\n\n  if (this.rs_headers.length < 1)\n    throw (new Error('At least one header must be signed'));\n\n  var alg, authz;\n  if (this.rs_signFunc) {\n    var data = this.rs_lines.join('\\n');\n    var self = this;\n    this.rs_signFunc(data, function (err, sig) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      try {\n        assert.object(sig, 'signature');\n        assert.string(sig.keyId, 'signature.keyId');\n        assert.string(sig.algorithm, 'signature.algorithm');\n        assert.string(sig.signature, 'signature.signature');\n        alg = validateAlgorithm(sig.algorithm);\n\n        authz = FormatAuthz('Signature ', {\n          keyId: sig.keyId,\n          algorithm: sig.algorithm,\n          headers: self.rs_headers.join(' '),\n          signature: sig.signature\n        });\n      } catch (e) {\n        cb(e);\n        return;\n      }\n      cb(null, authz);\n    });\n\n  } else {\n    try {\n      var sigObj = this.rs_signer.sign();\n    } catch (e) {\n      cb(e);\n      return;\n    }\n    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;\n    var signature = sigObj.toString();\n    authz = FormatAuthz('Signature ', {\n      keyId: this.rs_keyId,\n      algorithm: alg,\n      headers: this.rs_headers.join(' '),\n      signature: signature\n    });\n    cb(null, authz);\n  }\n};\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Identifies whether a given object is a request signer or not.\n   *\n   * @param {Object} object, the object to identify\n   * @returns {Boolean}\n   */\n  isSigner: function (obj) {\n    if (typeof (obj) === 'object' && obj instanceof RequestSigner)\n      return (true);\n    return (false);\n  },\n\n  /**\n   * Creates a request signer, used to asynchronously build a signature\n   * for a request (does not have to be an http.ClientRequest).\n   *\n   * @param {Object} options, either:\n   *                   - {String} keyId\n   *                   - {String|Buffer} key\n   *                   - {String} algorithm (optional, required for HMAC)\n   *                   - {String} keyPassphrase (optional, not for HMAC)\n   *                 or:\n   *                   - {Func} sign (data, cb)\n   * @return {RequestSigner}\n   */\n  createSigner: function createSigner(options) {\n    return (new RequestSigner(options));\n  },\n\n  /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * The optional flag indicates whether parsing should use strict enforcement\n   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n   * The default is to be loose and support\n   * older versions for compatibility.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional (unless key is HMAC);\n   *                              default is the same as the sshpk default\n   *                              signing algorithm for the type of key given\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   *                   - {Boolean} strict optional; defaults to 'false'.\n   *                   - {int}    expiresIn optional; defaults to 60. The\n   *                              seconds after which the signature should\n   *                              expire;\n   *                   - {String} keyPassphrase optional; The passphrase to\n   *                              pass to sshpk to parse the privateKey.\n   *                              This doesn't do anything if algorithm is\n   *                              HMAC.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n   *                                 the given key.\n   * @throws {sshpk.KeyParseError} if key was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */\n  signRequest: function signRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(options, 'options');\n    assert.optionalString(options.algorithm, 'options.algorithm');\n    assert.string(options.keyId, 'options.keyId');\n    assert.optionalString(options.opaque, 'options.opaque');\n    assert.optionalArrayOfString(options.headers, 'options.headers');\n    assert.optionalString(options.httpVersion, 'options.httpVersion');\n    assert.optionalNumber(options.expiresIn, 'options.expiresIn');\n    assert.optionalString(options.keyPassphrase, 'options.keyPassphrase');\n\n    if (!request.getHeader('Date'))\n      request.setHeader('Date', jsprim.rfc1123(new Date()));\n    var headers = ['date'];\n    if (options.headers)\n      headers = options.headers;\n    if (!options.httpVersion)\n      options.httpVersion = '1.1';\n\n    var alg = [];\n    if (options.algorithm) {\n      options.algorithm = options.algorithm.toLowerCase();\n      alg = validateAlgorithm(options.algorithm);\n    }\n\n    var key = options.key;\n    if (alg[0] === 'hmac') {\n      if (typeof (key) !== 'string' && !Buffer.isBuffer(key))\n        throw (new TypeError('options.key must be a string or Buffer'));\n    } else {\n      if (typeof (key) === 'string' || Buffer.isBuffer(key))\n        key = sshpk.parsePrivateKey(options.key, 'auto', {\n          passphrase: options.keyPassphrase\n        });\n\n      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n        'options.key must be a sshpk.PrivateKey');\n\n      if (!PK_ALGOS[key.type]) {\n        throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n          'keys are not supported'));\n      }\n\n      if (alg[0] === undefined) {\n        alg[0] = key.type;\n      } else if (key.type !== alg[0]) {\n        throw (new InvalidAlgorithmError('options.key must be a ' +\n          alg[0].toUpperCase() + ' key, was given a ' +\n          key.type.toUpperCase() + ' key instead'));\n      }\n      if (alg[1] === undefined) {\n        alg[1] = key.defaultHashAlgorithm();\n      }\n\n      options.algorithm = alg[0] + '-' + alg[1];\n    }\n\n    var params = {\n      'keyId': options.keyId,\n      'algorithm': options.algorithm\n    };\n\n    var i;\n    var stringToSign = '';\n    for (i = 0; i < headers.length; i++) {\n      if (typeof (headers[i]) !== 'string')\n        throw new TypeError('options.headers must be an array of Strings');\n\n      var h = headers[i].toLowerCase();\n\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /**\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          stringToSign +=\n            request.method + ' ' + request.path + ' HTTP/' +\n            options.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw (new StrictParsingError('request-line is not a valid header ' +\n            'with strict parsing enabled.'));\n        }\n      } else if (h === '(request-target)') {\n        stringToSign +=\n          '(request-target): ' + request.method.toLowerCase() + ' ' +\n          request.path;\n      } else if (h === '(keyid)') {\n        stringToSign += '(keyid): ' + options.keyId;\n      } else if (h === '(algorithm)') {\n        stringToSign += '(algorithm): ' + options.algorithm;\n      } else if (h === '(opaque)') {\n        var opaque = options.opaque;\n        if (opaque == undefined || opaque === '') {\n          throw new MissingHeaderError('options.opaque was not in the request');\n        }\n        stringToSign += '(opaque): ' + opaque;\n      } else if (h === '(created)') {\n        var created = Math.floor(Date.now() / 1000);\n        params.created = created;\n        stringToSign += '(created): ' + created;\n      } else if (h === '(expires)') {\n        var expiresIn = options.expiresIn;\n        if (expiresIn === undefined) {\n          expiresIn = 60;\n        }\n        const expires = Math.floor(Date.now() / 1000) + expiresIn;\n        params.expires = expires;\n        stringToSign += '(expires): ' + expires;\n      } else {\n        var value = request.getHeader(h);\n        if (value === undefined || value === '') {\n          throw new MissingHeaderError(h + ' was not in the request');\n        }\n        stringToSign += h + ': ' + value;\n      }\n\n      if ((i + 1) < headers.length)\n        stringToSign += '\\n';\n    }\n\n    /* This is just for unit tests. */\n    if (request.hasOwnProperty('_stringToSign')) {\n      request._stringToSign = stringToSign;\n    }\n\n    var signature;\n    if (alg[0] === 'hmac') {\n      var hmac = crypto.createHmac(alg[1].toUpperCase(), key);\n      hmac.update(stringToSign);\n      signature = hmac.digest('base64');\n    } else {\n      var signer = key.createSign(alg[1]);\n      signer.update(stringToSign);\n      var sigObj = signer.sign();\n      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n        throw (new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() +\n          ' is not a supported hash algorithm'));\n      }\n      assert.strictEqual(alg[1], sigObj.hashAlgorithm,\n        'hash algorithm mismatch');\n      signature = sigObj.toString();\n      assert.notStrictEqual(signature, '', 'empty signature produced');\n    }\n\n    var authzHeaderName = options.authorizationHeaderName || 'Authorization';\n    var prefix = authzHeaderName.toLowerCase() === utils.HEADER.SIG ?\n      '' : 'Signature ';\n\n    params.signature = signature;\n\n    if (options.opaque)\n      params.opaque = options.opaque;\n    if (options.headers)\n      params.headers = options.headers.join(' ');\n\n    request.setHeader(authzHeaderName, FormatAuthz(prefix, params));\n\n    return true;\n  }\n\n};\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 561, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 565, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/http-signature/lib/parser.js"],"sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar util = require('util');\nvar utils = require('./utils');\n\n\n\n///--- Globals\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\nvar State = {\n  New: 0,\n  Params: 1\n};\n\nvar ParamsState = {\n  Name: 0,\n  Quote: 1,\n  Value: 2,\n  Comma: 3,\n  Number: 4\n};\n\n///--- Specific Errors\n\n\nfunction ExpiredRequestError(message) {\n  HttpSignatureError.call(this, message, ExpiredRequestError);\n}\nutil.inherits(ExpiredRequestError, HttpSignatureError);\n\n\nfunction InvalidHeaderError(message) {\n  HttpSignatureError.call(this, message, InvalidHeaderError);\n}\nutil.inherits(InvalidHeaderError, HttpSignatureError);\n\n\nfunction InvalidParamsError(message) {\n  HttpSignatureError.call(this, message, InvalidParamsError);\n}\nutil.inherits(InvalidParamsError, HttpSignatureError);\n\n\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\n\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n\n///--- Exported API\n\nmodule.exports = {\n\n  /**\n   * Parses the 'Authorization' header out of an http.ServerRequest object.\n   *\n   * Note that this API will fully validate the Authorization header, and throw\n   * on any error.  It will not however check the signature, or the keyId format\n   * as those are specific to your environment.  You can use the options object\n   * to pass in extra constraints.\n   *\n   * As a response object you can expect this:\n   *\n   *     {\n   *       \"scheme\": \"Signature\",\n   *       \"params\": {\n   *         \"keyId\": \"foo\",\n   *         \"algorithm\": \"rsa-sha256\",\n   *         \"headers\": [\n   *           \"date\" or \"x-date\",\n   *           \"digest\"\n   *         ],\n   *         \"signature\": \"base64\"\n   *       },\n   *       \"signingString\": \"ready to be passed to crypto.verify()\"\n   *     }\n   *\n   * @param {Object} request an http.ServerRequest.\n   * @param {Object} options an optional options object with:\n   *                   - clockSkew: allowed clock skew in seconds (default 300).\n   *                   - headers: required header names (def: date or x-date)\n   *                   - algorithms: algorithms to support (default: all).\n   *                   - strict: should enforce latest spec parsing\n   *                             (default: false).\n   * @return {Object} parsed out object (see above).\n   * @throws {TypeError} on invalid input.\n   * @throws {InvalidHeaderError} on an invalid Authorization header error.\n   * @throws {InvalidParamsError} if the params in the scheme are invalid.\n   * @throws {MissingHeaderError} if the params indicate a header not present,\n   *                              either in the request headers from the params,\n   *                              or not in the params from a required header\n   *                              in options.\n   * @throws {StrictParsingError} if old attributes are used in strict parsing\n   *                              mode.\n   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.\n   */\n  parseRequest: function parseRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(request.headers, 'request.headers');\n    if (options === undefined) {\n      options = {};\n    }\n    assert.object(options, 'options');\n    assert.optionalFinite(options.clockSkew, 'options.clockSkew');\n\n    var headers = [request.headers['x-date'] ? 'x-date' : 'date'];\n    if (options.headers !== undefined) {\n      assert.arrayOfString(headers, 'options.headers');\n      headers = options.headers;\n    }\n\n    var authzHeaderName = options.authorizationHeaderName;\n    var authz = request.headers[authzHeaderName] ||\n      request.headers[utils.HEADER.AUTH] || request.headers[utils.HEADER.SIG];\n\n    if (!authz) {\n      var errHeader = authzHeaderName ? authzHeaderName :\n        utils.HEADER.AUTH + ' or ' + utils.HEADER.SIG;\n\n      throw new MissingHeaderError('no ' + errHeader + ' header ' +\n        'present in the request');\n    }\n\n    options.clockSkew = options.clockSkew || 300;\n\n\n    var i = 0;\n    var state = authz === request.headers[utils.HEADER.SIG] ?\n      State.Params : State.New;\n    var substate = ParamsState.Name;\n    var tmpName = '';\n    var tmpValue = '';\n\n    var parsed = {\n      scheme: authz === request.headers[utils.HEADER.SIG] ? 'Signature' : '',\n      params: {},\n      signingString: ''\n    };\n\n    for (i = 0; i < authz.length; i++) {\n      var c = authz.charAt(i);\n\n      switch (Number(state)) {\n\n        case State.New:\n          if (c !== ' ') parsed.scheme += c;\n          else state = State.Params;\n          break;\n\n        case State.Params:\n          switch (Number(substate)) {\n\n            case ParamsState.Name:\n              var code = c.charCodeAt(0);\n              // restricted name of A-Z / a-z\n              if ((code >= 0x41 && code <= 0x5a) || // A-Z\n                (code >= 0x61 && code <= 0x7a)) { // a-z\n                tmpName += c;\n              } else if (c === '=') {\n                if (tmpName.length === 0)\n                  throw new InvalidHeaderError('bad param format');\n                substate = ParamsState.Quote;\n              } else {\n                throw new InvalidHeaderError('bad param format');\n              }\n              break;\n\n            case ParamsState.Quote:\n              if (c === '\"') {\n                tmpValue = '';\n                substate = ParamsState.Value;\n              } else {\n                //number\n                substate = ParamsState.Number;\n                code = c.charCodeAt(0);\n                if (code < 0x30 || code > 0x39) { //character not in 0-9\n                  throw new InvalidHeaderError('bad param format');\n                }\n                tmpValue = c;\n              }\n              break;\n\n            case ParamsState.Value:\n              if (c === '\"') {\n                parsed.params[tmpName] = tmpValue;\n                substate = ParamsState.Comma;\n              } else {\n                tmpValue += c;\n              }\n              break;\n\n            case ParamsState.Number:\n              if (c === ',') {\n                parsed.params[tmpName] = parseInt(tmpValue, 10);\n                tmpName = '';\n                substate = ParamsState.Name;\n              } else {\n                code = c.charCodeAt(0);\n                if (code < 0x30 || code > 0x39) { //character not in 0-9\n                  throw new InvalidHeaderError('bad param format');\n                }\n                tmpValue += c;\n              }\n              break;\n\n\n            case ParamsState.Comma:\n              if (c === ',') {\n                tmpName = '';\n                substate = ParamsState.Name;\n              } else {\n                throw new InvalidHeaderError('bad param format');\n              }\n              break;\n\n            default:\n              throw new Error('Invalid substate');\n          }\n          break;\n\n        default:\n          throw new Error('Invalid substate');\n      }\n\n    }\n\n    if (!parsed.params.headers || parsed.params.headers === '') {\n      if (request.headers['x-date']) {\n        parsed.params.headers = ['x-date'];\n      } else {\n        parsed.params.headers = ['date'];\n      }\n    } else {\n      parsed.params.headers = parsed.params.headers.split(' ');\n    }\n\n    // Minimally validate the parsed object\n    if (!parsed.scheme || parsed.scheme !== 'Signature')\n      throw new InvalidHeaderError('scheme was not \"Signature\"');\n\n    if (!parsed.params.keyId)\n      throw new InvalidHeaderError('keyId was not specified');\n\n    if (!parsed.params.algorithm)\n      throw new InvalidHeaderError('algorithm was not specified');\n\n    if (!parsed.params.signature)\n      throw new InvalidHeaderError('signature was not specified');\n\n    // Check the algorithm against the official list\n    try {\n      validateAlgorithm(parsed.params.algorithm);\n    } catch (e) {\n      if (e instanceof InvalidAlgorithmError)\n        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +\n          'supported'));\n      else\n        throw (e);\n    }\n\n    // Build the signingString\n    for (i = 0; i < parsed.params.headers.length; i++) {\n      var h = parsed.params.headers[i].toLowerCase();\n      parsed.params.headers[i] = h;\n\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /*\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          parsed.signingString +=\n            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw (new StrictParsingError('request-line is not a valid header ' +\n            'with strict parsing enabled.'));\n        }\n      } else if (h === '(request-target)') {\n        parsed.signingString +=\n          '(request-target): ' + request.method.toLowerCase() + ' ' +\n          request.url;\n      } else if (h === '(keyid)') {\n        parsed.signingString += '(keyid): ' + parsed.params.keyId;\n      } else if (h === '(algorithm)') {\n        parsed.signingString += '(algorithm): ' + parsed.params.algorithm;\n      } else if (h === '(opaque)') {\n        var opaque = parsed.params.opaque;\n        if (opaque === undefined) {\n          throw new MissingHeaderError('opaque param was not in the ' +\n            authzHeaderName + ' header');\n        }\n        parsed.signingString += '(opaque): ' + opaque;\n      } else if (h === '(created)') {\n        parsed.signingString += '(created): ' + parsed.params.created;\n    } else if (h === '(expires)') {\n        parsed.signingString += '(expires): ' + parsed.params.expires;\n      } else {\n        var value = request.headers[h];\n        if (value === undefined)\n          throw new MissingHeaderError(h + ' was not in the request');\n        parsed.signingString += h + ': ' + value;\n      }\n\n      if ((i + 1) < parsed.params.headers.length)\n        parsed.signingString += '\\n';\n    }\n\n    // Check against the constraints\n    var date;\n    var skew;\n    if (request.headers.date || request.headers['x-date']) {\n      if (request.headers['x-date']) {\n        date = new Date(request.headers['x-date']);\n      } else {\n        date = new Date(request.headers.date);\n      }\n      var now = new Date();\n      skew = Math.abs(now.getTime() - date.getTime());\n\n      if (skew > options.clockSkew * 1000) {\n        throw new ExpiredRequestError('clock skew of ' +\n          (skew / 1000) +\n          's was greater than ' +\n          options.clockSkew + 's');\n      }\n    }\n\n    if (parsed.params.created) {\n      skew = parsed.params.created  - Math.floor(Date.now() / 1000);\n      if (skew > options.clockSkew) {\n        throw new ExpiredRequestError('Created lies in the future (with ' +\n          'skew ' + skew + 's greater than allowed ' + options.clockSkew +\n          's');\n      }\n    }\n\n    if (parsed.params.expires) {\n      var expiredSince = Math.floor(Date.now() / 1000) - parsed.params.expires;\n      if (expiredSince > options.clockSkew) {\n        throw new ExpiredRequestError('Request expired with skew ' +\n          expiredSince + 's greater than allowed ' + options.clockSkew + 's');\n      }\n    }\n\n    headers.forEach(function (hdr) {\n      // Remember that we already checked any headers in the params\n      // were in the request, so if this passes we're good.\n      if (parsed.params.headers.indexOf(hdr.toLowerCase()) < 0)\n        throw new MissingHeaderError(hdr + ' was not a signed header');\n    });\n\n    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();\n    if (options.algorithms) {\n      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)\n        throw new InvalidParamsError(parsed.params.algorithm +\n          ' is not a supported algorithm');\n    }\n\n    parsed.algorithm = parsed.params.algorithm.toUpperCase();\n    parsed.keyId = parsed.params.keyId;\n    parsed.opaque = parsed.params.opaque;\n    return parsed;\n  }\n\n};\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 858, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 862, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/http-signature/lib/index.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nvar parser = require('./parser');\nvar signer = require('./signer');\nvar verify = require('./verify');\nvar utils = require('./utils');\n\n\n\n///--- API\n\nmodule.exports = {\n\n  parse: parser.parseRequest,\n  parseRequest: parser.parseRequest,\n\n  sign: signer.signRequest,\n  signRequest: signer.signRequest,\n  createSigner: signer.createSigner,\n  isSigner: signer.isSigner,\n\n  sshKeyToPEM: utils.sshKeyToPEM,\n  sshKeyFingerprint: utils.fingerprint,\n  pemToRsaSSHKey: utils.pemToRsaSSHKey,\n\n  verify: verify.verifySignature,\n  verifySignature: verify.verifySignature,\n  verifyHMAC: verify.verifyHMAC\n};\n"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,IAAI,SAAS;AACb,IAAI,SAAS;AACb,IAAI,SAAS;AACb,IAAI,QAAQ;AAIZ,UAAU;AAEV,OAAO,OAAO,GAAG;IAEf,OAAO,OAAO,YAAY;IAC1B,cAAc,OAAO,YAAY;IAEjC,MAAM,OAAO,WAAW;IACxB,aAAa,OAAO,WAAW;IAC/B,cAAc,OAAO,YAAY;IACjC,UAAU,OAAO,QAAQ;IAEzB,aAAa,MAAM,WAAW;IAC9B,mBAAmB,MAAM,WAAW;IACpC,gBAAgB,MAAM,cAAc;IAEpC,QAAQ,OAAO,eAAe;IAC9B,iBAAiB,OAAO,eAAe;IACvC,YAAY,OAAO,UAAU;AAC/B"}},
    {"offset": {"line": 882, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}