{
  "version": 3,
  "sections": [
    {"offset": {"line": 8, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/mime/mime.js"],"sourcesContent":["var path = require('path');\nvar fs = require('fs');\n\nfunction Mime() {\n  // Map of extension -> mime type\n  this.types = Object.create(null);\n\n  // Map of mime type -> extension\n  this.extensions = Object.create(null);\n}\n\n/**\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n * to an array of extensions associated with the type.  The first extension is\n * used as the default extension for the type.\n *\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n *\n * @param map (Object) type definitions\n */\nMime.prototype.define = function (map) {\n  for (var type in map) {\n    var exts = map[type];\n    for (var i = 0; i < exts.length; i++) {\n      if (process.env.DEBUG_MIME && this.types[exts[i]]) {\n        console.warn((this._loading || \"define()\").replace(/.*\\//, ''), 'changes \"' + exts[i] + '\" extension type from ' +\n          this.types[exts[i]] + ' to ' + type);\n      }\n\n      this.types[exts[i]] = type;\n    }\n\n    // Default extension is the first one we encounter\n    if (!this.extensions[type]) {\n      this.extensions[type] = exts[0];\n    }\n  }\n};\n\n/**\n * Load an Apache2-style \".types\" file\n *\n * This may be called multiple times (it's expected).  Where files declare\n * overlapping types/extensions, the last file wins.\n *\n * @param file (String) path of file to load.\n */\nMime.prototype.load = function(file) {\n  this._loading = file;\n  // Read file and split into lines\n  var map = {},\n      content = fs.readFileSync(file, 'ascii'),\n      lines = content.split(/[\\r\\n]+/);\n\n  lines.forEach(function(line) {\n    // Clean up whitespace/comments, and split into fields\n    var fields = line.replace(/\\s*#.*|^\\s*|\\s*$/g, '').split(/\\s+/);\n    map[fields.shift()] = fields;\n  });\n\n  this.define(map);\n\n  this._loading = null;\n};\n\n/**\n * Lookup a mime type based on extension\n */\nMime.prototype.lookup = function(path, fallback) {\n  var ext = path.replace(/^.*[\\.\\/\\\\]/, '').toLowerCase();\n\n  return this.types[ext] || fallback || this.default_type;\n};\n\n/**\n * Return file extension associated with a mime type\n */\nMime.prototype.extension = function(mimeType) {\n  var type = mimeType.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/)[1].toLowerCase();\n  return this.extensions[type];\n};\n\n// Default instance\nvar mime = new Mime();\n\n// Define built-in types\nmime.define(require('./types.json'));\n\n// Default type\nmime.default_type = mime.lookup('bin');\n\n//\n// Additional API specific to the default instance\n//\n\nmime.Mime = Mime;\n\n/**\n * Lookup a charset based on mime type.\n */\nmime.charsets = {\n  lookup: function(mimeType, fallback) {\n    // Assume text types are utf8\n    return (/^text\\/|^application\\/(javascript|json)/).test(mimeType) ? 'UTF-8' : fallback;\n  }\n};\n\nmodule.exports = mime;\n"],"names":[],"mappings":"AAAA,IAAI,OAAO,+BAAQ;AACnB,IAAI,KAAK,+BAAQ;AAEjB,SAAS;IACP,gCAAgC;IAChC,IAAI,CAAC,KAAK,GAAG,OAAO,MAAM,CAAC;IAE3B,gCAAgC;IAChC,IAAI,CAAC,UAAU,GAAG,OAAO,MAAM,CAAC;AAClC;AAEA;;;;;;;;CAQC,GACD,KAAK,SAAS,CAAC,MAAM,GAAG,SAAU,GAAG;IACnC,IAAK,IAAI,QAAQ,IAAK;QACpB,IAAI,OAAO,GAAG,CAAC,KAAK;QACpB,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,IAAK;YACpC,IAAI,QAAQ,GAAG,CAAC,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;gBACjD,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,UAAU,EAAE,OAAO,CAAC,QAAQ,KAAK,cAAc,IAAI,CAAC,EAAE,GAAG,2BACtF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,SAAS;YACnC;YAEA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG;QACxB;QAEA,kDAAkD;QAClD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE;YAC1B,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE;QACjC;IACF;AACF;AAEA;;;;;;;CAOC,GACD,KAAK,SAAS,CAAC,IAAI,GAAG,SAAS,IAAI;IACjC,IAAI,CAAC,QAAQ,GAAG;IAChB,iCAAiC;IACjC,IAAI,MAAM,CAAC,GACP,UAAU,GAAG,YAAY,CAAC,MAAM,UAChC,QAAQ,QAAQ,KAAK,CAAC;IAE1B,MAAM,OAAO,CAAC,SAAS,IAAI;QACzB,sDAAsD;QACtD,IAAI,SAAS,KAAK,OAAO,CAAC,qBAAqB,IAAI,KAAK,CAAC;QACzD,GAAG,CAAC,OAAO,KAAK,GAAG,GAAG;IACxB;IAEA,IAAI,CAAC,MAAM,CAAC;IAEZ,IAAI,CAAC,QAAQ,GAAG;AAClB;AAEA;;CAEC,GACD,KAAK,SAAS,CAAC,MAAM,GAAG,SAAS,IAAI,EAAE,QAAQ;IAC7C,IAAI,MAAM,KAAK,OAAO,CAAC,eAAe,IAAI,WAAW;IAErD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,YAAY,IAAI,CAAC,YAAY;AACzD;AAEA;;CAEC,GACD,KAAK,SAAS,CAAC,SAAS,GAAG,SAAS,QAAQ;IAC1C,IAAI,OAAO,SAAS,KAAK,CAAC,0BAA0B,CAAC,EAAE,CAAC,WAAW;IACnE,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK;AAC9B;AAEA,mBAAmB;AACnB,IAAI,OAAO,IAAI;AAEf,wBAAwB;AACxB,KAAK,MAAM,CAAC;AAEZ,eAAe;AACf,KAAK,YAAY,GAAG,KAAK,MAAM,CAAC;AAEhC,EAAE;AACF,kDAAkD;AAClD,EAAE;AAEF,KAAK,IAAI,GAAG;AAEZ;;CAEC,GACD,KAAK,QAAQ,GAAG;IACd,QAAQ,SAAS,QAAQ,EAAE,QAAQ;QACjC,6BAA6B;QAC7B,OAAO,AAAC,0CAA2C,IAAI,CAAC,YAAY,UAAU;IAChF;AACF;AAEA,OAAO,OAAO,GAAG"}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}