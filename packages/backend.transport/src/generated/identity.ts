// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: identity.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "identity";

export interface RpcContactQuery {
  id?: string | undefined;
  ids: string[];
  name?: string | undefined;
  isPrimary?: boolean | undefined;
  isVisible?: boolean | undefined;
}

export interface RpcContactRequest {
  query: RpcContactQuery | undefined;
}

export interface RpcContact {
  _id: string;
  link?: string | undefined;
  name: string;
  value: string;
  type: string;
  isPrimary: boolean;
  isVisible: boolean;
  createdAt: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface RpcContactList {
  items: RpcContact[];
}

export const IDENTITY_PACKAGE_NAME = "identity";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface ContactServiceClient {
  getMany(request: RpcContactRequest): Observable<RpcContactList>;
}

export interface ContactServiceController {
  getMany(request: RpcContactRequest): Promise<RpcContactList> | Observable<RpcContactList> | RpcContactList;
}

export function ContactServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getMany"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ContactService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ContactService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CONTACT_SERVICE_NAME = "ContactService";
