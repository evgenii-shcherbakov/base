// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v5.26.1
// source: main.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { RpcContactList, RpcContactRequest } from "./models/contact";

export const protobufPackage = "main";

export type ContactServiceService = typeof ContactServiceService;
export const ContactServiceService = {
  getAllPublic: {
    path: "/main.ContactService/getAllPublic",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RpcContactRequest) => Buffer.from(RpcContactRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RpcContactRequest.decode(value),
    responseSerialize: (value: RpcContactList) => Buffer.from(RpcContactList.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RpcContactList.decode(value),
  },
} as const;

export interface ContactServiceServer extends UntypedServiceImplementation {
  getAllPublic: handleUnaryCall<RpcContactRequest, RpcContactList>;
}

export interface ContactServiceClient extends Client {
  getAllPublic(
    request: RpcContactRequest,
    callback: (error: ServiceError | null, response: RpcContactList) => void,
  ): ClientUnaryCall;
  getAllPublic(
    request: RpcContactRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RpcContactList) => void,
  ): ClientUnaryCall;
  getAllPublic(
    request: RpcContactRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RpcContactList) => void,
  ): ClientUnaryCall;
}

export const ContactServiceClient = makeGenericClientConstructor(
  ContactServiceService,
  "main.ContactService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ContactServiceClient;
  service: typeof ContactServiceService;
  serviceName: string;
};
