// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v5.26.1
// source: models/contact.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "contact";

export interface RpcContactQuery {
  id?: string;
  ids: string[];
  name?: string;
  isPublic?: boolean;
}

export interface RpcContactRequest {
  query: RpcContactQuery;
}

export interface RpcContact {
  _id: string;
  link?: string;
  name: string;
  value: string;
  isPublic: boolean;
  createdAt: Date;
  updatedAt?: Date;
}

export interface RpcContactList {
  items: RpcContact[];
}

function createBaseRpcContactQuery(): RpcContactQuery {
  return { id: undefined, ids: [], name: undefined, isPublic: undefined };
}

export const RpcContactQuery = {
  encode(message: RpcContactQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.ids) {
      writer.uint32(18).string(v!);
    }
    if (message.name !== undefined) {
      writer.uint32(26).string(message.name);
    }
    if (message.isPublic !== undefined) {
      writer.uint32(32).bool(message.isPublic);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcContactQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcContactQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ids.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isPublic = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcContactQuery {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.String(e)) : [],
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      isPublic: isSet(object.isPublic) ? globalThis.Boolean(object.isPublic) : undefined,
    };
  },

  toJSON(message: RpcContactQuery): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.ids?.length) {
      obj.ids = message.ids;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.isPublic !== undefined) {
      obj.isPublic = message.isPublic;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RpcContactQuery>, I>>(base?: I): RpcContactQuery {
    return RpcContactQuery.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RpcContactQuery>, I>>(object: I): RpcContactQuery {
    const message = createBaseRpcContactQuery();
    message.id = object.id ?? undefined;
    message.ids = object.ids?.map((e) => e) || [];
    message.name = object.name ?? undefined;
    message.isPublic = object.isPublic ?? undefined;
    return message;
  },
};

function createBaseRpcContactRequest(): RpcContactRequest {
  return { query: undefined };
}

export const RpcContactRequest = {
  encode(message: RpcContactRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      RpcContactQuery.encode(message.query, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcContactRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcContactRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = RpcContactQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcContactRequest {
    return { query: isSet(object.query) ? RpcContactQuery.fromJSON(object.query) : undefined };
  },

  toJSON(message: RpcContactRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = RpcContactQuery.toJSON(message.query);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RpcContactRequest>, I>>(base?: I): RpcContactRequest {
    return RpcContactRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RpcContactRequest>, I>>(object: I): RpcContactRequest {
    const message = createBaseRpcContactRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? RpcContactQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseRpcContact(): RpcContact {
  return { _id: "", link: undefined, name: "", value: "", isPublic: false, createdAt: undefined, updatedAt: undefined };
}

export const RpcContact = {
  encode(message: RpcContact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message._id !== "") {
      writer.uint32(10).string(message._id);
    }
    if (message.link !== undefined) {
      writer.uint32(18).string(message.link);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.value !== "") {
      writer.uint32(34).string(message.value);
    }
    if (message.isPublic !== false) {
      writer.uint32(48).bool(message.isPublic);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(66).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcContact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcContact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message._id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.link = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.value = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.isPublic = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcContact {
    return {
      _id: isSet(object._id) ? globalThis.String(object._id) : "",
      link: isSet(object.link) ? globalThis.String(object.link) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      isPublic: isSet(object.isPublic) ? globalThis.Boolean(object.isPublic) : false,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: RpcContact): unknown {
    const obj: any = {};
    if (message._id !== "") {
      obj._id = message._id;
    }
    if (message.link !== undefined) {
      obj.link = message.link;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.isPublic !== false) {
      obj.isPublic = message.isPublic;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RpcContact>, I>>(base?: I): RpcContact {
    return RpcContact.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RpcContact>, I>>(object: I): RpcContact {
    const message = createBaseRpcContact();
    message._id = object._id ?? "";
    message.link = object.link ?? undefined;
    message.name = object.name ?? "";
    message.value = object.value ?? "";
    message.isPublic = object.isPublic ?? false;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseRpcContactList(): RpcContactList {
  return { items: [] };
}

export const RpcContactList = {
  encode(message: RpcContactList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      RpcContact.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcContactList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcContactList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.items.push(RpcContact.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcContactList {
    return {
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => RpcContact.fromJSON(e)) : [],
    };
  },

  toJSON(message: RpcContactList): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => RpcContact.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RpcContactList>, I>>(base?: I): RpcContactList {
    return RpcContactList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RpcContactList>, I>>(object: I): RpcContactList {
    const message = createBaseRpcContactList();
    message.items = object.items?.map((e) => RpcContact.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
